// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const verifier = artifacts.require('SquareVerifier')
// - use the contents from proof.json generated from zokrates steps
const proof = require('../../zokrates/code/square/proof')

contract('TestVerifier', accounts => {
  const account_one = accounts[0]
  // Test verification with correct proof
  describe('Verification with correct proof', function () {
    beforeEach(async function () {
      this.contract = await verifier.new({ from: account_one })
    })
    it('verification with correct proof', async function () {
      let verified = await this.contract.verifyTx.call(
        proof.proof.a,
        proof.proof.b,
        proof.proof.c,
        proof.inputs,
        { from: account_one }
      )
      assert.equal(verified, true, 'verification must be valid')
    })

    // Test verification with incorrect proof
    it('Verification with incorrect proof', async function () {
      const input = [
        '0x0000000000000000000000000000000000000000000000000000000000000027',
        '0x0000000000000000000000000000000000000000000000000000000000000099'
      ]
      let verified = await this.contract.verifyTx.call(
        proof.proof.a,
        proof.proof.b,
        proof.proof.c,
        input,
        { from: account_one }
      )
      assert.equal(
        verified,
        false,
        'Verification should fail with incorrect proof'
      )
    })
  })
})
